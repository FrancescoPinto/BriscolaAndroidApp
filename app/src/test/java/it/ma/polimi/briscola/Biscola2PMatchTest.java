package it.ma.polimi.briscola;

import org.junit.Test;

import it.ma.polimi.briscola.model.briscola.twoplayers.Briscola2PMatch;

import static junit.framework.Assert.assertTrue;

/**
 * Created by utente on 31/10/17.
 */

public class Biscola2PMatchTest {

    //del prof
    String startingConfig1 = "0B5S4G6S2C5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B..JCKG2B.1CKS3G..";
    String startingConfig1_0 = "1B5S4G6S2C5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B.JC.KG2B.1CKS3G..";
    String startingConfig1_00 = "1B6S2C5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B..KG2B4G.KS3G5S..JC1C";
    String startingConfig1_001 = "0B6S2C5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B.3G.KG2B4G.KS5S..JC1C";
    String startingConfig1_0011 = "0B5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B..KG4G6S.KS5S2C.3G2B.JC1C";
    String startingConfig1_00110 = "1B5GKB7B6CHCHB1GKC5C4B1BHG7C6BJS6G7G4C3C7SJBHS2S3S4S1S2G3BJG5B.KG.4G6S.KS5S2C.3G2B.JC1C";

    //A sample match from beginning to end
    String startingConfig2 = "1GHGKGHS7C2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..3G1C6C.JC2C5B..";

    String moveSequenceConfig2 = "2120200110210201120022102122222212221100";
    String[] Config2Array = {
            "1GHGKGHS7C2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..3G1C6C.JC2C5B..",
            "0GHGKGHS7C2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.5B.3G1C6C.JC2C..",
            "1GHS7C2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..3G6CKG.JC2CHG..5B1C",
            "0GHS7C2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.HG.3G6CKG.JC2C..5B1C",
            "0G2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..6CKGHS.JC2C7C.HG3G.5B1C",
            "1G2S3B3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.HS.6CKG.JC2C7C.HG3G.5B1C",
            "0G3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..6CKG2S.2C7C3B.HG3GHSJC.5B1C",
            "1G3S4S7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.6C.KG2S.2C7C3B.HG3GHSJC.5B1C",
            "1G7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..KG2S4S.2C3B3S.HG3GHSJC.5B1C6C7C",
            "0G7B4B5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.3B.KG2S4S.2C3S.HG3GHSJC.5B1C6C7C",
            "0G5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..2S4S7B.2C3S4B.HG3GHSJC3BKG.5B1C6C7C",
            "1G5S6GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.7B.2S4S.2C3S4B.HG3GHSJC3BKG.5B1C6C7C",
            "0GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..2S4S5S.2C4B6G.HG3GHSJC3BKG7B3S.5B1C6C7C",
            "1GKSKB6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.2S.4S5S.2C4B6G.HG3GHSJC3BKG7B3S.5B1C6C7C",
            "1G6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..4S5SKB.2C4BKS.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G",
            "0G6SJB1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.2C.4S5SKB.4BKS.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G",
            "1G1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..4SKBJB.4BKS6S.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5S",
            "0G1G5CJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.KS.4SKBJB.4B6S.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5S",
            "1GJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG..4SKB5C.4B6S1G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB",
            "0GJS7S2G6BHB4CHC4GKC1S7G5G2B3C1BJG.4B.4SKB5C.6S1G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB",
            "1G2G6BHB4CHC4GKC1S7G5G2B3C1BJG..KB5C7S.6S1GJS.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4S",
            "0G2G6BHB4CHC4GKC1S7G5G2B3C1BJG.JS.KB5C7S.6S1G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4S",
            "1GHB4CHC4GKC1S7G5G2B3C1BJG..KB5C6B.6S1G2G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S",
            "0GHB4CHC4GKC1S7G5G2B3C1BJG.1G.KB5C6B.6S2G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S",
            "1GHC4GKC1S7G5G2B3C1BJG..5C6B4C.6S2GHB.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKB",
            "0GHC4GKC1S7G5G2B3C1BJG.HB.5C6B4C.6S2G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKB",
            "1GKC1S7G5G2B3C1BJG..5C4C4G.6S2GHC.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "0GKC1S7G5G2B3C1BJG.HC.5C4C4G.6S2G.HG3GHSJC3BKG7B3S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "0G7G5G2B3C1BJG..5C4CKC.6S2G1S.HG3GHSJC3BKG7B3SHC4G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "1G7G5G2B3C1BJG.KC.5C4C.6S2G1S.HG3GHSJC3BKG7B3SHC4G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "0G2B3C1BJG..5C4C7G.6S2G5G.HG3GHSJC3BKG7B3SHC4GKC1S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "1G2B3C1BJG.7G.5C4C.6S2G5G.HG3GHSJC3BKG7B3SHC4GKC1S.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "0G1BJG..5C4C2B.6S2G3C.HG3GHSJC3BKG7B3SHC4GKC1S7G5G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "1G1BJG.4C.5C2B.6S2G3C.HG3GHSJC3BKG7B3SHC4GKC1S7G5G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B",
            "1G..5C2BJG.6S2G1B.HG3GHSJC3BKG7B3SHC4GKC1S7G5G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C",//TODO la briscola va rimossa o meno dal deck?
            "0G.1B.5C2BJG.6S2G.HG3GHSJC3BKG7B3SHC4GKC1S7G5G.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C",
            "0G..5C2B.6S2G.HG3GHSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C",
            "1G.2B.5C.6S2G.HG3GHSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C",
            "1G..5C.6S.HG3GHSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C2B2G",
            "0G.6S.5C..HG3GHSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C2B2G",
            "WINNER073"
    };

    String[] Config3Array = {
            "0G.6S.5C..HSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C2B2GHG3G",
            "DRAW"
    };

    String[] Config4Array = {
            "0G.6S.5C..3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C2B2GHG3GHSJC",
            "WINNER165"
    };

    String[] Config5Array = {
            "1G.2B.5C.6S2G.HG3GHSJC3BKG7B3SHC4GKC1S7G5G1BJG.5B1C6C7C2S6G2C5SKSJB4B4SJS7S1GKBHB6B4C3C",
            "WINNER165"
    };

    String HAND_indexOutOfBoundsErrorMessage =  "ERROR:The index of the card to be removed must be between "+0+" and ";




    //todo testa stati inconsistenti (il prof dice che NON tester√† configurazioni inconsistenti, MA TESTERA' MOSSE ILLECITE!)

    @Test
    public void moveTest(){
        String outcome = MoveTest.moveTest(startingConfig1,"0");


        assertTrue(outcome.equals(startingConfig1_0));
        outcome = MoveTest.moveTest(startingConfig1,"00");
        assertTrue(outcome.equals(startingConfig1_00));
        outcome = MoveTest.moveTest(startingConfig1,"001");
        assertTrue(outcome.equals(startingConfig1_001));
        outcome = MoveTest.moveTest(startingConfig1,"0011");
        assertTrue(outcome.equals(startingConfig1_0011));
        outcome = MoveTest.moveTest(startingConfig1,"00110");
        assertTrue(outcome.equals(startingConfig1_00110));

        //todo test per i casi limite (i.e. inizializzazione, configurazioni sbagliate, stati diversi ecc. ecc., finite le carte in deck, nelle mani, chiusura match, WINNER, DRAW E SCATENARE TUTTI GLI ERRORI etc. etc.)

        for(int i = 1; i <= moveSequenceConfig2.length(); i++){

            outcome = MoveTest.moveTest(startingConfig2, moveSequenceConfig2.substring(0,i));

           // System.out.println(outcome);
           // System.out.println(Config2Array[i]);
            assertTrue(outcome.equals(Config2Array[i]));
        }

        outcome = MoveTest.moveTest(Config3Array[0], "0");
        System.out.println(outcome);
        System.out.println(Config3Array[1]);
        assertTrue(outcome.equals(Config3Array[1]));


        outcome = MoveTest.moveTest(Config4Array[0], "0");
        System.out.println(outcome);
        System.out.println(Config4Array[1]);
        assertTrue(outcome.equals(Config4Array[1]));

        outcome = MoveTest.moveTest(Config2Array[0], "54");
        System.out.println(outcome);
        System.out.println(HAND_indexOutOfBoundsErrorMessage + 2);
        assertTrue(outcome.equals(HAND_indexOutOfBoundsErrorMessage + 2));

        outcome = MoveTest.moveTest(Config2Array[22], "4");
        System.out.println(outcome);
        System.out.println(HAND_indexOutOfBoundsErrorMessage + 2);
        assertTrue(outcome.equals(HAND_indexOutOfBoundsErrorMessage + 2));

        outcome = MoveTest.moveTest(Config3Array[0], "4");
        System.out.println(outcome);
        System.out.println(HAND_indexOutOfBoundsErrorMessage + 0);
        assertTrue(outcome.equals(HAND_indexOutOfBoundsErrorMessage + 0));

        outcome = MoveTest.moveTest(Config5Array[0], "2");
        System.out.println(outcome);
        System.out.println(HAND_indexOutOfBoundsErrorMessage + 1);
        assertTrue(outcome.equals(HAND_indexOutOfBoundsErrorMessage + 1));

    }

}
